import java.util.Stack;

public class InfixToPrefix {
    // Function to check if the given character is an operator
    private static boolean isOperator(char c) {
        return (!Character.isLetterOrDigit(c));
    }

    // Function to get the precedence of operators
    private static int getPrecedence(char c) {
        switch (c) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    // Function to convert infix to prefix
    public static String infixToPrefix(String infix) {
        // Reverse the infix expression
        String reversedInfix = new StringBuilder(infix).reverse().toString();
        
        // Replace '(' with ')' and vice versa
        char[] charsReversedInfix = reversedInfix.toCharArray();
        for (int i = 0; i < charsReversedInfix.length; i++) {
            if (charsReversedInfix[i] == '(') {
                charsReversedInfix[i] = ')';
            } else if (charsReversedInfix[i] == ')') {
                charsReversedInfix[i] = '(';
            }
        }
        
        // Get the postfix expression of the modified infix expression
        String postfix = infixToPostfix(new String(charsReversedInfix));
        
        // Reverse the postfix expression to get the prefix expression
        return new StringBuilder(postfix).reverse().toString();
    }

    // Function to convert infix to postfix (used as a helper function)
    private static String infixToPostfix(String infix) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (char c : infix.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                result.append(c);
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && getPrecedence(c) <= getPrecedence(stack.peek())) {
                    result.append(stack.pop());
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String infix = "(A-B/C)*(A/K-L)";
        String prefix = infixToPrefix(infix);
        System.out.println("Infix Expression: " + infix);
        System.out.println("Prefix Expression: " + prefix);
    }
}
