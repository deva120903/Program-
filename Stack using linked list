import java.io.*;
import java.util.*;

public class Solution {

    // Node class for the singly linked list
    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Stack class using singly linked list
    private static class Stack {
        private Node top; // Top node of the stack
        private int size; // Size of the stack

        public Stack() {
            top = null;
            size = 0;
        }

        // Push operation
        public void push(int data) {
            Node newNode = new Node(data);
            newNode.next = top;
            top = newNode;
            size++;
        }

        // Pop operation
        public int pop() {
            if (top == null) {
                return -1; // Stack is empty
            }
            int data = top.data;
            top = top.next;
            size--;
            return data;
        }

        // Top operation
        public int top() {
            if (top == null) {
                return -1; // Stack is empty
            }
            return top.data;
        }

        // Size operation
        public int size() {
            return size;
        }

        // IsEmpty operation
        public boolean isEmpty() {
            return top == null;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int q = Integer.parseInt(br.readLine().trim());
        Stack stack = new Stack();
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < q; i++) {
            String[] parts = br.readLine().split(" ");
            int query = Integer.parseInt(parts[0]);

            switch (query) {
                case 1:
                    // Push operation
                    int data = Integer.parseInt(parts[1]);
                    stack.push(data);
                    break;
                case 2:
                    // Pop operation
                    sb.append(stack.pop()).append("\n");
                    break;
                case 3:
                    // Top operation
                    sb.append(stack.top()).append("\n");
                    break;
                case 4:
                    // Size operation
                    sb.append(stack.size()).append("\n");
                    break;
                case 5:
                    // IsEmpty operation
                    sb.append(stack.isEmpty() ? "true" : "false").append("\n");
                    break;
                default:
                    throw new IllegalArgumentException("Invalid query type");
            }
        }

        // Output all results at once for efficiency
        System.out.print(sb.toString());
    }
}
